# -*- coding: utf-8 -*-
"""execute_orders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ncDblkI2iq3jRCVoCThioMO73bEDBcOP
"""

# !pip install fastapi
# !pip install kaleido
# !pip install python-multipart
# !pip install uvicorn
# !pip install cohere
# !pip install openai
# !pip install tiktoken



# !pip install alpaca
# !pip install openai==1.3.7 alpaca-py==0.13.3

from alpaca.data.historical import CryptoHistoricalDataClient
from alpaca.data.requests import CryptoBarsRequest
from alpaca.data.timeframe import TimeFrame
from datetime import datetime

# !pip install alpaca_trade_api

APCA_API_BASE_URL = 'https://paper-api.alpaca.markets'
APCA_API_KEY_ID = 'PK6OLMQA3TSKGUT30NG7'
APCA_API_SECRET_KEY = 'Jb2dE9ir20DlosSvfkP9YI8Tywtec9KJPP446cy6'
import alpaca_trade_api as tradeapi
# Set up Alpaca API
api = tradeapi.REST(APCA_API_KEY_ID, APCA_API_SECRET_KEY, base_url=APCA_API_BASE_URL, api_version='v2')

import datetime
import pandas as pd

start_date = '2022-12-05'
end_date = '2023-12-05'

def execute_orders(symbol, threshold=0.4):
    # Get historical data
    # end_date = datetime.datetime.now()
    # start_date = end_date - datetime.timedelta(days=365)  # 1-year historical data
    # historical_data = get_historical_data(symbol, start_date, end_date, 'day')

    # # Calculate daily returns
    # historical_data['returns'] = historical_data['close'].pct_change()

    # Calculate Sharpe ratio
    sharpe_ratio = sharpe

    # Get current account information
    account = api.get_account()
    historical_data=df
    # Get the current position in the stock
    position = api.get_position(symbol)

    # Execute buy or sell orders based on Sharpe ratio
    if sharpe_ratio > threshold:
        if position and position.qty > 0:
            print(f"Selling {position.qty} shares of {symbol}")
            api.submit_order(
                symbol=symbol,
                qty=position.qty,
                side='sell',
                type='market',
                time_in_force='gtc',
            )
        else:
            buying_power = float(account.buying_power)
            if buying_power > 0:
                qty_to_buy = int(buying_power / historical_data['close'].iloc[-1])
                print(f"Buying {qty_to_buy} shares of {symbol}")
                api.submit_order(
                    symbol=symbol,
                    qty=qty_to_buy,
                    side='buy',
                    type='market',
                    time_in_force='gtc',
                )
    else:
        if position and position.qty > 0:
            print(f"Selling {position.qty} shares of {symbol}")
            api.submit_order(
                symbol=symbol,
                qty=position.qty,
                side='sell',
                type='market',
                time_in_force='gtc',
            )

# # Set up Alpaca API
# api = tradeapi.REST(APCA_API_KEY_ID, APCA_API_SECRET_KEY, base_url=APCA_API_BASE_URL, api_version='v2')

# Function to get historical data
def get_historical_data(symbol, start_date, end_date, timeframe, limit=100):

  try:
    bars = api.get_bars('AAPL', '1D', start='2022-12-05', end='2023-12-05', limit=100).df
    print(bars)
  except Exception as e:
    print(f"Error: {e}")
    print(f"API Response: {e.response.text}")
  return bars


# Function to calculate Sharpe ratio
def calculate_sharpe_ratio(returns):
    sharpe_ratio = (returns.mean() / returns.std()) * (252 ** 0.5)  # Assuming 252 trading days in a year
    return sharpe_ratio

# Function to execute orders based on Sharpe ratio
def execute_orders(symbol, threshold):
    # Get historical data
    # end_date = datetime.datetime.now()
    # start_date = end_date - datetime.timedelta(days=365)  # 1-year historical data
    historical_data = get_historical_data(symbol, start_date, end_date, 'day')

    # Calculate daily returns
    historical_data['returns'] = historical_data['close'].pct_change()

    # Calculate Sharpe ratio
    sharpe_ratio = calculate_sharpe_ratio(historical_data['returns'])
    # sharpe_ratio=0.8

    # Get current account information
    account = api.get_account()

    # Get the current position in the stock
    position = api.get_position(symbol)
    print("position:    ",position," aur ye uski qty:""",position.qty)
    # Execute buy or sell orders based on Sharpe ratio
    if sharpe_ratio > threshold:
        if position and position.qty > 0:
            print(f"Selling {position.qty} shares of {symbol}")
            api.submit_order(
                symbol=symbol,
                qty=position.qty,
                side='sell',
                type='market',
                time_in_force='gtc',
            )
        else:
            buying_power = float(account.buying_power)
            if buying_power > 0:
                qty_to_buy = int(buying_power / historical_data['close'].iloc[-1])
                print(f"Buying {qty_to_buy} shares of {symbol}")
                api.submit_order(
                    symbol=symbol,
                    qty=qty_to_buy,
                    side='buy',
                    type='market',
                    time_in_force='gtc',
                )
    else:
        if position and position.qty > 0:
            print(f"Selling {position.qty} shares of {symbol}")
            api.submit_order(
                symbol=symbol,
                qty=position.qty,
                side='sell',
                type='market',
                time_in_force='gtc',
            )

execute_orders('MSFT', 0.4)